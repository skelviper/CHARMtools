# Cell3D Output Module - Output format conversion
import warnings
import pandas as pd
import numpy as np
from io import StringIO

class Cell3DOutput:
    """Output format conversion for Cell3D objects"""
    
    def write_cif(self, output_path=None, cellname=None, tdg=None, resolution=None):
        """Write Cell3D data to CIF format"""
        if cellname is None:
            cellname = self.cellname
        if tdg is None:
            if self.on_disk:
                self.to_memory()
            tdg = self.tdg
        if resolution is None:
            resolution = self.resolution
        
        # Sort by chromosome and position
        tdg_sorted = tdg.sort_values(['chrom', 'pos']).reset_index(drop=True)
        
        # Create CIF content
        cif_content = StringIO()
        
        # Write header
        cif_content.write(f"data_{cellname}\n")
        cif_content.write("#\n")
        cif_content.write(f"_cell.entry_id {cellname}\n")
        cif_content.write(f"_cell.length_a {resolution}\n")
        cif_content.write(f"_cell.length_b {resolution}\n")
        cif_content.write(f"_cell.length_c {resolution}\n")
        cif_content.write("_cell.angle_alpha 90.0\n")
        cif_content.write("_cell.angle_beta 90.0\n")
        cif_content.write("_cell.angle_gamma 90.0\n")
        cif_content.write("#\n")
        
        # Write atom site loop
        cif_content.write("loop_\n")
        cif_content.write("_atom_site.group_PDB\n")
        cif_content.write("_atom_site.id\n")
        cif_content.write("_atom_site.type_symbol\n")
        cif_content.write("_atom_site.label_atom_id\n")
        cif_content.write("_atom_site.label_alt_id\n")
        cif_content.write("_atom_site.label_comp_id\n")
        cif_content.write("_atom_site.label_asym_id\n")
        cif_content.write("_atom_site.label_entity_id\n")
        cif_content.write("_atom_site.label_seq_id\n")
        cif_content.write("_atom_site.pdbx_PDB_ins_code\n")
        cif_content.write("_atom_site.Cartn_x\n")
        cif_content.write("_atom_site.Cartn_y\n")
        cif_content.write("_atom_site.Cartn_z\n")
        cif_content.write("_atom_site.occupancy\n")
        cif_content.write("_atom_site.B_iso_or_equiv\n")
        cif_content.write("_atom_site.pdbx_formal_charge\n")
        cif_content.write("_atom_site.auth_seq_id\n")
        cif_content.write("_atom_site.auth_comp_id\n")
        cif_content.write("_atom_site.auth_asym_id\n")
        cif_content.write("_atom_site.auth_atom_id\n")
        cif_content.write("_atom_site.pdbx_PDB_model_num\n")
        
        # Write atom data
        for idx, row in tdg_sorted.iterrows():
            chrom = row['chrom']
            pos = row['pos']
            x, y, z = row['x'], row['y'], row['z']
            
            # Extract chromosome number and allele
            if chrom.endswith('a') or chrom.endswith('b'):
                chrom_base = chrom[:-1]
                allele = chrom[-1]
            else:
                chrom_base = chrom
                allele = 'a'
            
            # Calculate sequence ID based on position and resolution
            seq_id = int(pos // resolution) + 1
            
            # Default B-factor
            b_factor = 20.0
            
            # Write atom line
            cif_content.write(f"ATOM {idx+1:>5} C CA . BIN {allele.upper()} 1 {seq_id:>4} ? ")
            cif_content.write(f"{x:>8.3f} {y:>8.3f} {z:>8.3f} 1.00 {b_factor:>6.2f} ? ")
            cif_content.write(f"{seq_id:>4} BIN {allele.upper()} CA 1\n")
        
        # Get the final content
        cif_string = cif_content.getvalue()
        cif_content.close()
        
        if output_path:
            with open(output_path, 'w') as f:
                f.write(cif_string)
            return None
        else:
            return cif_string
    
    def write_pdb(self, output_path=None, cellname=None, tdg=None):
        """Write Cell3D data to PDB format"""
        if cellname is None:
            cellname = self.cellname
        if tdg is None:
            if self.on_disk:
                self.to_memory()
            tdg = self.tdg
        
        # Sort by chromosome and position
        tdg_sorted = tdg.sort_values(['chrom', 'pos']).reset_index(drop=True)
        
        # Create PDB content
        pdb_content = StringIO()
        
        # Write header
        pdb_content.write(f"HEADER    CHROMATIN STRUCTURE                    {cellname}\n")
        pdb_content.write(f"TITLE     3D CHROMATIN STRUCTURE FOR CELL {cellname}\n")
        pdb_content.write("REMARK   1 GENERATED BY CHARM TOOLS\n")
        
        # Write atom records
        for idx, row in tdg_sorted.iterrows():
            chrom = row['chrom']
            pos = row['pos']
            x, y, z = row['x'], row['y'], row['z']
            
            # Extract chromosome information
            if chrom.endswith('a') or chrom.endswith('b'):
                chrom_base = chrom[:-1]
                allele = chrom[-1]
            else:
                chrom_base = chrom
                allele = 'A'
            
            # Calculate residue number
            res_num = int(pos // self.resolution) + 1
            
            # Write ATOM record
            pdb_content.write(f"ATOM  {idx+1:>5}  CA  BIN {allele.upper()}{res_num:>4}    ")
            pdb_content.write(f"{x:>8.3f}{y:>8.3f}{z:>8.3f}  1.00 20.00           C  \n")
        
        pdb_content.write("END\n")
        
        # Get the final content
        pdb_string = pdb_content.getvalue()
        pdb_content.close()
        
        if output_path:
            with open(output_path, 'w') as f:
                f.write(pdb_string)
            return None
        else:
            return pdb_string
    
    def write_xyz(self, output_path=None, cellname=None, tdg=None):
        """Write Cell3D data to XYZ format"""
        if cellname is None:
            cellname = self.cellname
        if tdg is None:
            if self.on_disk:
                self.to_memory()
            tdg = self.tdg
        
        # Sort by chromosome and position
        tdg_sorted = tdg.sort_values(['chrom', 'pos']).reset_index(drop=True)
        
        # Create XYZ content
        xyz_content = StringIO()
        
        # Write number of atoms
        xyz_content.write(f"{len(tdg_sorted)}\n")
        
        # Write comment line
        xyz_content.write(f"3D chromatin structure for cell {cellname}\n")
        
        # Write coordinates
        for idx, row in tdg_sorted.iterrows():
            chrom = row['chrom']
            x, y, z = row['x'], row['y'], row['z']
            
            # Use chromosome as atom type
            atom_type = chrom.replace('chr', 'C')
            
            xyz_content.write(f"{atom_type:<4} {x:>12.6f} {y:>12.6f} {z:>12.6f}\n")
        
        # Get the final content
        xyz_string = xyz_content.getvalue()
        xyz_content.close()
        
        if output_path:
            with open(output_path, 'w') as f:
                f.write(xyz_string)
            return None
        else:
            return xyz_string
    
    def write_csv(self, output_path=None, cellname=None, tdg=None, include_features=True):
        """Write Cell3D data to CSV format"""
        if cellname is None:
            cellname = self.cellname
        if tdg is None:
            if self.on_disk:
                self.to_memory()
            tdg = self.tdg
        
        # Sort by chromosome and position
        tdg_sorted = tdg.sort_values(['chrom', 'pos']).reset_index(drop=True)
        
        if not include_features:
            # Only include basic columns
            columns_to_include = ['chrom', 'pos', 'x', 'y', 'z']
            tdg_output = tdg_sorted[columns_to_include]
        else:
            tdg_output = tdg_sorted
        
        if output_path:
            tdg_output.to_csv(output_path, index=False)
            return None
        else:
            return tdg_output.to_csv(index=False)
    
    def export_summary(self, output_path=None):
        """Export summary statistics of the Cell3D object"""
        if self.on_disk:
            self.to_memory()
        
        summary = {
            'cellname': self.cellname,
            'resolution': self.resolution,
            'n_points': len(self.tdg),
            'chromosomes': list(self.tdg['chrom'].unique()),
            'n_chromosomes': self.tdg['chrom'].nunique(),
            'features': self.features,
            'n_features': len(self.features),
            'coordinate_ranges': {
                'x_min': self.tdg['x'].min(),
                'x_max': self.tdg['x'].max(),
                'y_min': self.tdg['y'].min(),
                'y_max': self.tdg['y'].max(),
                'z_min': self.tdg['z'].min(),
                'z_max': self.tdg['z'].max()
            }
        }
        
        if hasattr(self, 'metadata') and self.metadata:
            summary['metadata'] = self.metadata
        
        if output_path:
            import json
            with open(output_path, 'w') as f:
                json.dump(summary, f, indent=2, default=str)
            return None
        else:
            return summary